# Generated by Django 4.1 on 2022-08-17 06:57

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_id', models.BigAutoField(primary_key=True, serialize=False, verbose_name='사용자_id')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '사용자',
                'verbose_name_plural': '사용자 목록',
                'db_table': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Apply',
            fields=[
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('apply_id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'verbose_name': '지원',
                'verbose_name_plural': '지원 목록',
                'db_table': 'apply',
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('company_id', models.BigAutoField(primary_key=True, serialize=False, verbose_name='회사_id')),
                ('name', models.CharField(max_length=20, verbose_name='회사명')),
                ('country', models.CharField(max_length=20, verbose_name='국가')),
                ('region', models.CharField(max_length=20, verbose_name='지역')),
            ],
            options={
                'verbose_name': '회사',
                'verbose_name_plural': '회사 목록',
                'db_table': 'company',
            },
        ),
        migrations.CreateModel(
            name='Jobposting',
            fields=[
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('jobposting_id', models.BigAutoField(primary_key=True, serialize=False, verbose_name='채용공고_id')),
                ('position', models.CharField(max_length=100, verbose_name='채용포지션')),
                ('reward', models.IntegerField(verbose_name='채용보상금')),
                ('content', models.TextField(verbose_name='채용내용')),
                ('skill', models.CharField(max_length=100, verbose_name='사용기술')),
                ('apply', models.ManyToManyField(blank=True, related_name='appliers', through='jobpostings.Apply', to=settings.AUTH_USER_MODEL, verbose_name='지원자')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='company_jobpostings', to='jobpostings.company')),
            ],
            options={
                'verbose_name': '채용공고',
                'verbose_name_plural': '채용공고 목록',
                'db_table': 'jobposting',
            },
        ),
        migrations.AddField(
            model_name='apply',
            name='jobposting_id',
            field=models.ForeignKey(db_column='jobposting_id', on_delete=django.db.models.deletion.CASCADE, related_name='applys', to='jobpostings.jobposting'),
        ),
        migrations.AddField(
            model_name='apply',
            name='user_id',
            field=models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='applys', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddConstraint(
            model_name='apply',
            constraint=models.UniqueConstraint(fields=('user_id', 'jobposting_id'), name='unique applys'),
        ),
    ]
